/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const useGetAllFilesHook = () => {
  const getAllFiles = useAxios<string[]>();

  return () => {
    return getAllFiles({ url: `/api/watermark`, method: "get" });
  };
};

export const getGetAllFilesQueryKey = () => [`/api/watermark`];

export const useGetAllFiles = <
  TData = AsyncReturnType<ReturnType<typeof useGetAllFilesHook>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    AsyncReturnType<ReturnType<typeof useGetAllFilesHook>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFilesQueryKey();

  const getAllFiles = useGetAllFilesHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetAllFilesHook>>
  > = () => getAllFiles();

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetAllFilesHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

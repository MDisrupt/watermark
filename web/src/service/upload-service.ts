/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, UseMutationOptions, MutationFunction } from "react-query";
import type { UploadFile200, UploadFileBody } from "./models";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const useUploadFileHook = () => {
  const uploadFile = useAxios<UploadFile200>();

  return (uploadFileBody: UploadFileBody) => {
    return uploadFile({
      url: `/api/watermark/upload`,
      method: "post",
      data: uploadFileBody,
    });
  };
};

export const useUploadFile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useUploadFileHook>>,
    TError,
    { data: UploadFileBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const uploadFile = useUploadFileHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useUploadFileHook>>,
    { data: UploadFileBody }
  > = (props) => {
    const { data } = props || {};

    return uploadFile(data);
  };

  return useMutation<
    AsyncReturnType<typeof uploadFile>,
    TError,
    { data: UploadFileBody },
    TContext
  >(mutationFn, mutationOptions);
};
